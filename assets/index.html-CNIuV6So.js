import{_ as i,c as a,a as l,o as t}from"./app-DMcXO7hu.js";const s={};function n(r,e){return t(),a("div",null,[...e[0]||(e[0]=[l('<h2 id="bgp特点" tabindex="-1"><a class="header-anchor" href="#bgp特点"><span>BGP特点</span></a></h2><ul><li>可靠性 利用TCP建立可靠连接 精确（无环）的路由选择信息</li><li>稳定性 通过计时器防止接口flaping 可以跟踪指定的路由，根据震荡历时进行衰减</li><li>可扩展性 对等体的数量，可以支持数百个会话 路由的数量，可以支持几十万条以上的路由条目</li><li>灵活性 丰富的路由属性 多策略的管理</li></ul><h2 id="bgp的邻居模型" tabindex="-1"><a class="header-anchor" href="#bgp的邻居模型"><span>BGP的邻居模型</span></a></h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>两种邻居模型： IBGP&amp;EBGP</p></div><h3 id="ebgp" tabindex="-1"><a class="header-anchor" href="#ebgp"><span>EBGP:</span></a></h3><ul><li>在不同AS间建立邻居关系</li><li>一般通过直连接口建立邻居关系（因为AS之间无IGP协议）</li><li>EBGP管理距离为20</li></ul><h3 id="ibgp" tabindex="-1"><a class="header-anchor" href="#ibgp"><span>IBGP:</span></a></h3><ul><li>在相同AS内建立的BGP邻居关系</li><li>邻居之间不需要直连，只要IGP路由可达即可</li><li>IBGP路由管理距离为200</li></ul><h2 id="bgp三张表" tabindex="-1"><a class="header-anchor" href="#bgp三张表"><span>BGP三张表</span></a></h2><h3 id="邻居表" tabindex="-1"><a class="header-anchor" href="#邻居表"><span>邻居表</span></a></h3><ul><li>BGP邻居必须是显示配置，而IGP的邻居默认是隐式配置</li><li>BGP邻居可以不在同一个广播域，不需要邻居发现机制</li></ul><h3 id="转发表-bgp数据库" tabindex="-1"><a class="header-anchor" href="#转发表-bgp数据库"><span>转发表（BGP数据库）</span></a></h3><ul><li>数据库会保存来自所有邻居的路径信息</li><li>数据库中如果出现到同一目的地的多条路径，BGP默认不会同时安装进路由表，而是通过一系列选路比较安装最优的一条</li></ul><h3 id="路由表" tabindex="-1"><a class="header-anchor" href="#路由表"><span>路由表</span></a></h3><ul><li>到路由表的安装过程需要通过比较AD值来完成</li></ul><h2 id="bgp邻居建立过程" tabindex="-1"><a class="header-anchor" href="#bgp邻居建立过程"><span>BGP邻居建立过程</span></a></h2><h3 id="基本条件" tabindex="-1"><a class="header-anchor" href="#基本条件"><span>基本条件</span></a></h3><ul><li>BGP的邻居关系是基于TCP连接建立</li><li>TCP连接是一种P2P的单播连接，要求TCP端点必须路由可达</li><li>端点路由需要依赖IGP协议来交互</li><li>BGP邻居建立需要IGP路由来作为基础</li><li>BGP的邻居也称为BGP对等体</li></ul><h3 id="建立过程" tabindex="-1"><a class="header-anchor" href="#建立过程"><span>建立过程</span></a></h3><ul><li>通过路由表查询路由发起TCP连接，完成三次TCP握手，发起连接的源端口为高位随机端口，目标端口为179</li><li>发起连接的源默认可能是邻居双方中的任意一方</li><li>TCP三次握手完成后，相互产生OpenMessage进行邻居建立协商</li><li>协商成功后，通过Keepalive Message维持邻居关系</li><li>通过Update Message发送路由更新</li><li>如果邻居建立协商失败，或者是建立成功后出现故障，通过Notification Message来通知邻居，需要断开连接</li></ul><h2 id="bgp的四种报文" tabindex="-1"><a class="header-anchor" href="#bgp的四种报文"><span>BGP的四种报文</span></a></h2><ol><li><strong>open message</strong>： <ul><li>在TCP连接建立后产生</li><li>用于协商邻居建立的关键参数（as number,hold time,router ID）</li><li>hold time可以协商，以以比较小的一方数值为准</li><li>router ID选择方式与OSPF一致</li><li>修改router ID会重置邻居关系</li></ul></li><li><strong>keepalive message</strong>： <ul><li>相当于IGP协议的hello报文</li><li>在open之后产生，用作心跳，确保邻居关系的存在</li><li>消息本身不携带任何参数，依靠IP包头内源地址确认邻居</li><li>默认频率60s，若180s内没有收到下一个keepalive，则认为邻居无效</li><li>keepalive发送频率为协商后的hold time/3</li><li>keepalive可能与open合为一个message发送</li></ul></li><li><strong>update message</strong>： <ul><li>用于在邻居之间交互路由信息</li><li>该消息采用触发更新和增量更新的方式发送</li><li>包含路径的路由前缀以及该路由携带的attribute</li><li>按照共性的方式进行排列（将attribute完全相同的归为一组）</li><li>一条update可以只通告一条路由，携带多个属性</li><li>一条update也可以通告多条路由，但是属性必须一致</li><li>一条update可以同时撤销多条路由</li></ul></li><li><strong>notification</strong>： <ul><li>用于向邻居发送一些错误通告（例：hello time无法协商或者超时、AS号不匹配）</li></ul></li></ol><h2 id="状态机" tabindex="-1"><a class="header-anchor" href="#状态机"><span>状态机</span></a></h2><ol><li><strong>Idle（空闲）</strong>： <ul><li>空闲状态，BGP 邻居初始化状态.</li><li>如果neighbor 指定的为 EBGP 邻居，则启动直连检测，检测失败保持 Idle状态，如果检测成功则进入 Active 状态，开始尝试TCP 连接</li><li>如果 neighbor 指定的为 iBGP 邻居，则直接开始查询路由表，无论是否存在路由都转换状态为 Active, 准备尝试 TCP 连接。</li></ul></li><li><strong>Active（激活）</strong>： <ul><li>活动状态，开始进行 TCP 连接建立</li><li>启用随机延时，确保两边不会同时开始 TCP 会话</li><li>如果查不到去往邻居的路由，并作为主动连接方，则继续保持该状态，每30秒重新检测一次路由条目。</li><li>如果查不到去往邻居的路由，并作为被动连接方，则继续保特该状态，等待对方发起的 TCP 连接。</li><li>如果存在去往邻居的路由，并作为主动连接方，但是收不到对方回应，则继续保持该状态，每30 秒尝试一次重新连接。</li><li>如果存在去往邻居的路由，但是作为被动连按方，并且收到了对方产生的TCP 连接，则退回到ldle， 并立即进入 Connect 状态。</li><li>如果 TCP 连接成功，则立即进入 Open sent 抉态，并开始协商，如果协商失败则退回到ldle， 并重新进入Active 状态，开始循环。</li></ul></li><li><strong>Connect（连接）</strong>： <ul><li>连接状态，被动等待 TCP 连接的完成。</li><li>如果 TCP 连接建主成功则直接进入 Open sent 次态</li><li>如果 TCP 连接失败，则进入 Active 状态，尝试重新建立 TCP 连接</li><li>Connect 状态一定要从ldle 状态进入</li></ul></li><li><strong>OpenSent（已发送Open消息）</strong>： <ul><li>打开发送，双方进行参数协商，也就是产生 Open Message</li><li>如果 Open Message 协商成功，则进入到 Open confirm 状态</li><li>如果 Open Message 协商失败，则产生 Notification Message 并退回到 idle.</li></ul></li><li><strong>OpenConfirm（已确认Open消息）</strong>： <ul><li>打开确认，协商取得一致</li><li>如果从对等体收到了 Keepalive，则进入 Establish 状态</li></ul></li><li><strong>Established（已建立）</strong>： <ul><li>邻居建立成功</li><li>BGP将开始通过update message交互路由信息</li></ul></li></ol><ul><li>配置BGP进程并且指定neighbor以后，双方初始处于idle状态，开始检查路由</li><li>路由检测完成后，进入active状态，并启用随机延时计时</li><li>延时计时器较小的一方会主动发起TCP连接，而另一方将退回idle并立即进入connect状态</li><li>连接建立后双方进入Open sent状态，开始发送Open message 以及keepalive</li><li>协商完成后，双方进入Open confirm状态，并立即进入establish，邻居建立完成</li></ul><h2 id="邻居建立的必要条件" tabindex="-1"><a class="header-anchor" href="#邻居建立的必要条件"><span>邻居建立的必要条件</span></a></h2><h3 id="缺省路由的使用" tabindex="-1"><a class="header-anchor" href="#缺省路由的使用"><span>缺省路由的使用</span></a></h3><ul><li>对IBGP邻居与EBGP邻居均有效</li><li>TCP连接的发起方不能使用缺省路由</li><li>TCP连接的被连接放可以使用缺省路由回应</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>针对BGP路由，更新源地址将会成为路由的next hop</p></div><h3 id="直连检测" tabindex="-1"><a class="header-anchor" href="#直连检测"><span>直连检测</span></a></h3><ul><li>仅对EBGP邻居有效</li><li>如果对等体之间AS号相同，则TCP连接以及之后所有的message交互时，IP包头内的TTL=255</li><li>如果对等体之间的AS号不同，则TCP连接以及之后所有message交互时，IP包头内的TTL默认为1</li><li>因此如果EBGP邻居检测到到达对等体的路由是非直连路由，则不会发起连接，也不糊响应对端的TCP连接，可以关闭直连检测</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>neighbor x.x.x.x disable-connect-check</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果TCP连接需要穿越三层设备，则必须修改TTL值才能完成连接</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code class="language-"><span class="line"><span>neighbor x.x.x.x ebgp-multihop [ttl value](1-255)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>如果在直连的两个设备之间用loopback接口建立ebgp邻居，TTL=1也可以成功</li><li>ebgp-multihop默认包含了disable-connect-check的功能</li></ul></div><h3 id="更新源检测" tabindex="-1"><a class="header-anchor" href="#更新源检测"><span>更新源检测</span></a></h3><ul><li>对IBGP和EBGP邻居均有效</li><li>对等体发起连接的源地址必须为本地neighbor所指定的地址，否则连接被拒绝</li><li>单向检测成功即可建立邻居关系</li></ul><h2 id="停留在不同状态原因" tabindex="-1"><a class="header-anchor" href="#停留在不同状态原因"><span>停留在不同状态原因</span></a></h2><h3 id="如果一直停留在-ldle-状态-则可能" tabindex="-1"><a class="header-anchor" href="#如果一直停留在-ldle-状态-则可能"><span>如果一直停留在 ldle 状态，则可能：</span></a></h3><ul><li>EBGP 直连检测没有通过。</li><li>因为某些 BGP Feature 导致的连接被限制。例如：maximum-prefix</li></ul><h3 id="如果一直停留在-active-状态-则可能" tabindex="-1"><a class="header-anchor" href="#如果一直停留在-active-状态-则可能"><span>如果一直停留在 Active 状态，则可能：</span></a></h3><ul><li>没有去往邻居的路由</li><li>邻居没有回包路曲</li><li>邻居没有neighbor 指令</li><li>邻居neighbor 指令中地址错误</li><li>两端 AS number 不匹配</li><li>两端Authentication 不通过</li></ul><h2 id="选路原则" tabindex="-1"><a class="header-anchor" href="#选路原则"><span>选路原则</span></a></h2><p>1、优选具有最高weight值的路径 2、具有较高local preference的路径优先（AS内传递） 3、优选本地始发的路由 4、优选AS path最短的路径 5、根据origin code的顺序（i&gt;e&gt;?） 6、优选MED（metric）最小的路径 7、ebgp优于ibgp 8、优选bgp next hop的igp开销最小的路径</p>',44)])])}const p=i(s,[["render",n]]),o=JSON.parse('{"path":"/network/n1rfi9th/","title":"bgp","lang":"zh-CN","frontmatter":{"title":"bgp","createTime":"2025/09/11 13:11:28","permalink":"/network/n1rfi9th/","description":"BGP特点 可靠性 利用TCP建立可靠连接 精确（无环）的路由选择信息 稳定性 通过计时器防止接口flaping 可以跟踪指定的路由，根据震荡历时进行衰减 可扩展性 对等体的数量，可以支持数百个会话 路由的数量，可以支持几十万条以上的路由条目 灵活性 丰富的路由属性 多策略的管理 BGP的邻居模型 提示 两种邻居模型： IBGP&EBGP EBGP: ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"bgp\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-28T07:57:58.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"http://git.x-echo.net/network/n1rfi9th/"}],["meta",{"property":"og:site_name","content":"谈呀"}],["meta",{"property":"og:title","content":"bgp"}],["meta",{"property":"og:description","content":"BGP特点 可靠性 利用TCP建立可靠连接 精确（无环）的路由选择信息 稳定性 通过计时器防止接口flaping 可以跟踪指定的路由，根据震荡历时进行衰减 可扩展性 对等体的数量，可以支持数百个会话 路由的数量，可以支持几十万条以上的路由条目 灵活性 丰富的路由属性 多策略的管理 BGP的邻居模型 提示 两种邻居模型： IBGP&EBGP EBGP: ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-28T07:57:58.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-28T07:57:58.000Z"}]]},"readingTime":{"minutes":7.23,"words":2170},"git":{"createdTime":1740042688000,"updatedTime":1748419078000,"contributors":[{"name":"wyutan","username":"wyutan","email":"90786339+wyutan@users.noreply.github.com","commits":9,"avatar":"https://avatars.githubusercontent.com/wyutan?v=4","url":"https://github.com/wyutan"}],"changelog":[{"hash":"b03cb8b870d01e77f178878166a70fa59321e8d2","time":1748419078000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"Update 2.bgp.md"},{"hash":"2348e7c44b878fe8a29e39330b8d6a33abac448d","time":1748414579000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"Update 2.bgp.md"},{"hash":"3e651fdf26be6b9f3134d0a7251909ca2f56125f","time":1742183787000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"Update 2.bgp.md"},{"hash":"c0dec07484783cf25d089a51cec9e47a6780429a","time":1742183224000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"Update 2.bgp.md"},{"hash":"e63d6b6e31a5239da8565f8b3b658a1f83a346c6","time":1741958875000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"更新 2.bgp.md"},{"hash":"3ae14fee0e195d482f9e9e2d7320f339a19372f1","time":1741958714000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"更新 2.bgp.md"},{"hash":"afa12cced6a9e7714c61ff088b7b762b6052a59a","time":1740410696000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"Rename bgp.md to 2.bgp.md"},{"hash":"7780a57d8dcdd55327da296f1070c1a96a01b999","time":1740109154000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"Update bgp.md"},{"hash":"21c64a4309790e84e117ebe920a757e26fd0bcff","time":1740042688000,"email":"90786339+wyutan@users.noreply.github.com","author":"wyutan","message":"Add files via upload"}]},"autoDesc":true,"filePathRelative":"network/protocol/2.bgp.md","headers":[]}');export{p as comp,o as data};
